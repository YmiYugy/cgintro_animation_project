#version 430 core
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_storage_buffer_object: enable

layout(
local_size_x = 64,
local_size_y = 1,
local_size_z = 1
) in;

struct Boid
{
    vec4 pos;
    vec4 vel;
};

layout(std430, binding = 0) buffer Boids
{
    Boid boids[];
};

uniform float delta;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    vec3 pos = boids[gid].pos.xyz;
    vec3 vel = boids[gid].vel.xyz;
    vec3 vel2 = vec3(0);

    float d = abs(dot(pos-vec3(0.0, 0.0, -2.0), vec3(0.0, 0.0, 1.0)));
    if (d< 0.1) {
        vel2 += reflect(vel, vec3(0.0, 0.0, 1.0)) * 1.0/(d* 10.0);
    }

    d = abs(dot(pos-vec3(0.0, 0.0, 2.0), vec3(0.0, 0.0, 1.0)));
    if (d< 0.1) {
        vel += reflect(vel, vec3(0.0, 0.0, 1.0)) * 1.0/(d* 10.0);
        vel2 = normalize(vel);
    }

    d = abs(dot(pos-vec3(0.0, 2.0, 0.0), vec3(0.0, 1.0, 0.0)));
    if (d< 0.1) {
        vel2 += reflect(vel, vec3(0.0, 1.0, 0.0)) * 1.0/(d* 10.0);
    }

    d = abs(dot(pos-vec3(0.0, -2.0, 0.0), vec3(0.0, 1.0, 0.0)));
    if (d< 0.1) {
        vel2 += reflect(vel, vec3(0.0, 1.0, 0.0)) * 1.0/(d* 10.0);
    }

    d = abs(dot(pos-vec3(2.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)));
    if (d< 0.1) {
        vel2 += reflect(vel, vec3(1.0, 0.0, 0.0)) * 1.0/(d* 10.0);
    }

    d = abs(dot(pos-vec3(-2.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)));
    if (d< 0.1) {
        vel2 += reflect(vel, vec3(1.0, 0.0, 0.0)) * 1.0/(d* 10.0);
    }

    vel += vel2;
    vel = normalize(vel);

    pos += delta * vel;

    boids[gid].pos.xyz = pos;
    boids[gid].vel.xyz = vel;
}
