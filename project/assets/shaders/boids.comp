#version 430 core
#extension GL_ARB_compute_shader: enable


layout(
local_size_x = 128,
local_size_y = 1,
local_size_z = 1
) in;

struct Boid
{
    vec4 pos;
    vec4 vel;
};

struct EnvironmentModel {
    mat4 model;
    uint index_offset;
    uint triangle_count;
    vec2 padding_0;
};

layout(std430, binding = 0) buffer Boids
{
    Boid boids[];
};

layout(std430, binding = 1) buffer Boids2
{
    Boid boids2[];
};

layout(std430, binding = 2) buffer Indices
{
    uint indices[];
};

layout(std430, binding = 3) buffer Vertices
{
    vec4 vertices[];
};

layout(std430, binding = 4) buffer EnvironmentModels {
    EnvironmentModel models[];
};

layout(std430, binding = 5) buffer SamplePoints {
    vec4 samplePoints[];
};

uniform float delta;
uniform uint boid_count;
uniform uint model_count;
uniform uint sample_count;

layout(std140, binding = 0) uniform SimulationParameters {
    float max_steer_force;
    float max_speed;
    float min_speed;
    float view_radius;
    float avoid_radius;
    float align_weight;
    float cohesion_weight;
    float center_weight;
    float seperate_weight;
    float collisions_avoid_dst;
    float avoid_collision_weight;
    float collision_avoid_force_dst;
    float padding_2;
};

#define EPS 1e-8
#define INFINITY 1e10


// MÃ¶ller-Trumbore algorithm
float intersectTriangle(vec3 orig, vec3 dir, vec3 vertices[3]) {
    precision highp float;
    vec3 v0 = vertices[0];
    vec3 v1 = vertices[1];
    vec3 v2 = vertices[2];
    vec3 v0v1 = v1 - v0;
    vec3 v0v2 = v2 - v0;
    vec3 pvec = cross(dir, v0v2);
    float det = dot(v0v1, pvec);
    if (abs(det) < EPS) return INFINITY;
    float invDet = 1 / det;

    vec3 tvec = orig - v0;
    float u = invDet * dot(tvec, pvec);
    if (u < 0 || u > 1) return INFINITY;

    vec3 qvec = cross(tvec, v0v1);
    float v = invDet * dot(dir, qvec);
    if (v < 0 || u + v > 1) return INFINITY;

    float t = invDet * dot(v0v2, qvec);

    return (t > EPS) ? t : INFINITY;
}

vec3 orthogonal(vec3 v) {
    float x = abs(v.x);
    float y = abs(v.y);
    float z = abs(v.z);

    vec3 other = x < y ? (x < z ? vec3(1, 0, 0) : vec3(0, 0, 1)) : (y < z ? vec3(0, 1, 0) : vec3(0, 0, 1));
    return cross(v, other);
}

vec4 get_rotation_between(vec3 u, vec3 v) {
    vec4 q;
    vec3 v0 = normalize(u);
    vec3 v1 = normalize(v);

    float d = dot(v0, v1);

    if (d < (EPS - 1.0)) {
        q = vec4(normalize(orthogonal(u)), 0);
    } else {
        float s = sqrt((1+d)*2);
        float invs = 1/s;

        vec3 c = cross(v0, v1);

        q.x = c.x * invs;
        q.y = c.y * invs;
        q.z = c.z * invs;
        q.w = s * 0.5;
        q = normalize(q);
    }
    return q;
}

vec3 rotate(vec4 quaternion, vec3 vec) {
    return vec + 2.0 * cross(quaternion.xyz, cross(quaternion.xyz, vec) + quaternion.w * vec);
}

vec3 steer_towards(vec3 vec, vec3 vel) {
    float l = length(vec);
    if (abs(l) < EPS) {
        return vec3(0);
    }
    vec3 v = vec/l * max_speed - vel;
    l = length(v);
    if (abs(l) < EPS) {
        return vec3(0);
    }
    return clamp(l, 0, max_steer_force) * v/l;
}

float find_dist(vec3 orig, vec3 dir, float threshold) {
    float dist = INFINITY;

    for (uint k = 0; k < model_count; k++) {
        for (uint j = 0; j < models[k].triangle_count; j++) {
            vec3 v[3];
            v[0] = (models[k].model * vertices[indices[3*j + 0 + models[k].index_offset]]).xyz;
            v[1] = (models[k].model * vertices[indices[3*j + 1 + models[k].index_offset]]).xyz;
            v[2] = (models[k].model * vertices[indices[3*j + 2 + models[k].index_offset]]).xyz;
            dist = min(dist, intersectTriangle(orig, dir, v));
            if (dist <= threshold) return dist;
        }
    }
    return dist;
}

void main() {
    uint gid = gl_GlobalInvocationID.x;
    vec3 pos = boids[gid].pos.xyz;
    vec3 vel = boids[gid].vel.xyz;


    vec3 acceleration = vec3(0);

    {
        vec3 center = vec3(0);
        vec3 alignment = vec3(0);
        uint mates = 0;
        vec3 separate = vec3(0);

        for (uint i = 0; i < boid_count; i++) {
            if (i == gid) continue;

            Boid boid = boids[i];
            vec3 offset = boid.pos.xyz - pos;
            float dist2 = dot(offset, offset);
            if (dist2 < view_radius * view_radius) {
                center += boids[i].pos.xyz;
                alignment += boid.vel.xyz;
                mates++;
            }
            if (dist2 < avoid_radius * avoid_radius) {
                separate -= (boid.pos.xyz-pos)/dist2;
            }
        }

        if (mates > 0) {
            center /= mates;
            center -= pos;
        }

        acceleration += cohesion_weight * steer_towards(center, vel);
        acceleration += align_weight * steer_towards(alignment, vel);
        acceleration += seperate_weight * steer_towards(separate, vel);
        acceleration += center_weight * steer_towards(vec3(1, 0.0, 0.0)-pos, vel);
    }
    vel += delta * acceleration;


    vec4 q_rot = get_rotation_between(vec3(1, 0, 0), vel);


    float dist = find_dist(pos, vel, collision_avoid_force_dst);
    if (dist <= collisions_avoid_dst) {
        float max_dist = 0.0;
        uint max_dist_index = 0;
        vec3 sampleDir = vec3(1, 0, 0);

        for (uint i = 1; i < sample_count; i++) {
            vec3 sampleDir2 = rotate(q_rot, samplePoints[i].xyz);
            float dist2 = find_dist(pos, sampleDir2, collisions_avoid_dst);
            if (dist2 > max_dist) {
                max_dist = dist2;
                max_dist_index = i;
                sampleDir = sampleDir2;
            }
            if (dist2 > collisions_avoid_dst) {
                break;
            }
        }

        if (dist <= collision_avoid_force_dst) {
            //vel = length(vel) * sampleDir;
            vel += delta * avoid_collision_weight * avoid_collision_weight * steer_towards(sampleDir, vel);
        } else {
            vel += delta * avoid_collision_weight * steer_towards(sampleDir, vel);
        }
    }



    float speed = length(vel);
    vel = clamp(speed, min_speed, max_speed)*vel/speed;

    pos += vel * delta;

    boids2[gid].pos.xyz = pos;
    boids2[gid].vel.xyz = vel;


}
